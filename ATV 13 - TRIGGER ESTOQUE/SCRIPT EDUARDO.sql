SET SQL_SAFE_UPDATES = 0;
DROP DATABASE IF EXISTS DBPEDIDO;
CREATE DATABASE DBPEDIDO;

USE DBPEDIDO;

CREATE TABLE PRODUTO (
	IDPRODUTO INT NOT NULL AUTO_INCREMENT
    , NOME VARCHAR(45)
    , ESTOQUE INT
	, PRIMARY KEY(IDPRODUTO)
);

CREATE TABLE COMPRA (
	IDCOMPRA INT NOT NULL AUTO_INCREMENT
    , IDPRODUTO INT NOT NULL
	, QTDE INT
    , PRECOUNITARIO NUMERIC(8,2)
    , PRIMARY KEY (IDCOMPRA)
    , FOREIGN KEY (IDPRODUTO) REFERENCES PRODUTO(IDPRODUTO)
);

CREATE TABLE VENDA (
	IDVENDA INT NOT NULL AUTO_INCREMENT
    , IDPRODUTO INT NOT NULL
	, QTDE INT
    , PRECOUNITARIO NUMERIC(8,2)
    , PRIMARY KEY (IDVENDA)
    , FOREIGN KEY (IDPRODUTO) REFERENCES PRODUTO(IDPRODUTO)
);

DELIMITER $$

-- OK TRIGGER DE INSERÇÃO POR COMPRA 
CREATE TRIGGER TR_COMPRA_AI AFTER INSERT ON COMPRA FOR EACH ROW
BEGIN
	UPDATE PRODUTO 
    SET ESTOQUE = ESTOQUE + NEW.QTDE
    WHERE IDPRODUTO = NEW.IDPRODUTO;
END $$

-- OK TRIGGER DE EXCLUSÃO POR VENDA
CREATE TRIGGER TR_VENDA_AI AFTER INSERT ON VENDA FOR EACH ROW
BEGIN
	UPDATE PRODUTO 
    SET ESTOQUE = ESTOQUE - NEW.QTDE
	WHERE IDPRODUTO = NEW.IDPRODUTO;
END $$

-- OK TRIGGER DE VERIFICAÇÃO DA POSSIBILIDADE DE CANCELAR COMPRA
CREATE TRIGGER TR_COMPRA_BD BEFORE DELETE ON COMPRA FOR EACH ROW
BEGIN
	/* ATRAVÉS DE VARIÁVEL
	DECLARE vESTOQUE INT;
    SELECT ESTOQUE INTO vESTOQUE FROM PRODUTO WHERE IDPRODUTO = OLD.IDPRODUTO;
    IF vESTOQUE < OLD.QTDE
    */
	IF 
	OLD.QTDE > (SELECT ESTOQUE FROM PRODUTO WHERE PRODUTO.IDPRODUTO = OLD.IDPRODUTO)
	THEN 
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'IMPOSSÍVEL CANCELAR, ITENS JÁ FORAM VENDIDOS.';
    END IF;
END $$

-- OK TRIGGER DE ADIÇÃO AO ESTOQUE POR EXCLUSÃO DE VENDA
CREATE TRIGGER TR_VENDA_AD AFTER DELETE ON VENDA FOR EACH ROW
BEGIN 
	UPDATE PRODUTO 
    SET ESTOQUE = ESTOQUE + OLD.QTDE
	WHERE IDPRODUTO = OLD.IDPRODUTO;
END $$

-- OK TRIGGER DE VERIFICAÇÃO DE ESTOQUE ANTES DA VENDA
CREATE TRIGGER TR_VENDA_BI BEFORE INSERT ON VENDA FOR EACH ROW
BEGIN
	IF 
		NEW.QTDE > (SELECT ESTOQUE FROM PRODUTO WHERE PRODUTO.IDPRODUTO = NEW.IDPRODUTO)
	THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'IMPOSSÍVEL ADICIONAR VENDA, ESTOQUE INSUFICIENTE.';
	END IF;
END $$

-- OK TRIGGER DE VERIFICAÇÃO SE O ESTOQUE ESTÁ OK PARA ATUALIZAR
CREATE TRIGGER TR_COMPRA_BU BEFORE UPDATE ON COMPRA FOR EACH ROW
BEGIN
	DECLARE vESTOQUENEW INT;
    DECLARE vESTOQUEOLD INT;
    SELECT ESTOQUE INTO vESTOQUENEW FROM PRODUTO WHERE IDPRODUTO = NEW.IDPRODUTO;
    SELECT ESTOQUE INTO vESTOQUEOLD FROM PRODUTO WHERE IDPRODUTO = OLD.IDPRODUTO;
   
   -- OK CONFERINDO ENQUANTO FOR O MESMO PRODUTO
	IF 
		OLD.IDPRODUTO = NEW.IDPRODUTO AND
		( vESTOQUENEW + (NEW.QTDE - OLD.QTDE) ) < 0
	THEN 
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'IMPOSSÍVEL ALTERAR COMPRA, ESTOQUE NEGATIVO.';
	END IF;
	-- OK CONFERINDO SE FOR PRODUTOS DIFERENTES
	IF 
		OLD.IDPRODUTO != NEW.IDPRODUTO AND
		vESTOQUEOLD < OLD.QTDE
	THEN 
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'IMPOSSÍVEL ALTERAR COMPRA, ESTOQUE NEGATIVO.';
	END IF;
	 
END $$

-- OK TRIGGER DE ATUALIZAÇÃO DO ESTOQUE PELO UPDATE DA COMPRA
CREATE TRIGGER TR_COMPRA_AU AFTER UPDATE ON COMPRA FOR EACH ROW
BEGIN
	-- REMOVER ESTOQUE DO PRODUTO ANTIGO E ADICIONANDO NO NOVO
    -- INDIFERENTE QUE SEJAM PRODUTOS DIFERENTES, 
    -- PORQUE O TRIGGER BU NÃO VAI DEIXAR ESTOQUES NEGATIVOS.
	UPDATE PRODUTO SET ESTOQUE = ESTOQUE - OLD.QTDE WHERE IDPRODUTO = OLD.IDPRODUTO;
	UPDATE PRODUTO SET ESTOQUE = ESTOQUE + NEW.QTDE WHERE IDPRODUTO = NEW.IDPRODUTO;	    
END $$

-- TRIGGER DE VERIFICAÇÃO DE ESTOQUE ANTES DE ALTERAR VENDA	
CREATE TRIGGER TR_TRIGGER_BU BEFORE UPDATE ON VENDA FOR EACH ROW
BEGIN
	IF 
		NEW.QTDE > (SELECT ESTOQUE FROM PRODUTO WHERE IDPRODUTO = NEW.IDPRODUTO)
	THEN 
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'IMPOSSÍVEL ALTERAR VENDA, ESTOQUE INSUFICIENTE.';
	END IF;
END $$

-- OK TRIGGER DE ATUALIZAÇÃO DO ESTOQUE PELO UPDATE DA VENDA
CREATE TRIGGER TR_VENDA_AU AFTER UPDATE ON VENDA FOR EACH ROW
BEGIN
	UPDATE PRODUTO SET ESTOQUE = ESTOQUE + OLD.QTDE WHERE IDPRODUTO = OLD.IDPRODUTO;
    UPDATE PRODUTO SET ESTOQUE = ESTOQUE - NEW.QTDE WHERE IDPRODUTO = NEW.IDPRODUTO;
    -- O BU VAI IMPEDIR QUE SEJA ADICIONADO VENDA DO NOVO PRODUTO COM ESTOQUE NEGATIVO NO ANTIGO
END $$

DELIMITER ;


INSERT INTO PRODUTO (NOME, ESTOQUE) VALUES ('COCA-COLA', 0);
INSERT INTO PRODUTO (NOME, ESTOQUE) VALUES ('PEPSI', 0);
INSERT INTO PRODUTO (NOME, ESTOQUE) VALUES ('SPRITE', 0);
INSERT INTO COMPRA (IDPRODUTO, QTDE, PRECOUNITARIO) VALUES (1, 10, 3);
INSERT INTO COMPRA (IDPRODUTO, QTDE, PRECOUNITARIO) VALUES (2, 10, 3);
INSERT INTO COMPRA (IDPRODUTO, QTDE, PRECOUNITARIO) VALUES (3, 10, 3);
INSERT INTO VENDA (IDPRODUTO, QTDE, PRECOUNITARIO) VALUES (2, 8, 2);
INSERT INTO VENDA (IDPRODUTO, QTDE, PRECOUNITARIO) VALUES (1, 10, 2);
SELECT * FROM PRODUTO;
UPDATE VENDA SET QTDE = 30 WHERE IDVENDA = 1;
UPDATE VENDA SET IDPRODUTO = 1 WHERE IDVENDA = 2;   
