SET SQL_SAFE_UPDATES = 0;
DROP DATABASE IF EXISTS DBPEDIDO;
CREATE DATABASE DBPEDIDO;

USE DBPEDIDO;

CREATE TABLE PRODUTO (
	IDPRODUTO INT NOT NULL AUTO_INCREMENT
    , NOME VARCHAR(45)
    , ESTOQUE INT
	, PRIMARY KEY(IDPRODUTO)
);

CREATE TABLE COMPRA (
	IDCOMPRA INT NOT NULL AUTO_INCREMENT
    , IDPRODUTO INT NOT NULL
	, QTDE INT
    , PRECOUNITARIO NUMERIC(8,2)
    , PRIMARY KEY (IDCOMPRA)
    , FOREIGN KEY (IDPRODUTO) REFERENCES PRODUTO(IDPRODUTO)
);

CREATE TABLE VENDA (
	IDVENDA INT NOT NULL AUTO_INCREMENT
    , IDPRODUTO INT NOT NULL
	, QTDE INT
    , PRECOUNITARIO NUMERIC(8,2)
    , PRIMARY KEY (IDVENDA)
    , FOREIGN KEY (IDPRODUTO) REFERENCES PRODUTO(IDPRODUTO)
);

DELIMITER $$

-- 1. INSERÇÃO POR COMPRA
CREATE TRIGGER TR_COMPRA_AI AFTER INSERT ON COMPRA FOR EACH ROW
BEGIN
	UPDATE PRODUTO 
		SET ESTOQUE = ESTOQUE + NEW.QTDE
		WHERE IDPRODUTO = NEW.IDPRODUTO;
END $$

-- 2. REMOÇÃO POR VENDA
CREATE TRIGGER TR_VENDA_AI AFTER INSERT ON VENDA FOR EACH ROW
BEGIN 
	UPDATE PRODUTO
		SET ESTOQUE = ESTOQUE - NEW.QTDE
        WHERE IDPRODUTO = NEW.IDPRODUTO;
END $$

-- 3. VERIFICAÇÃO DE REMOÇÃO DE COMPRA
CREATE TRIGGER TR_COMPRA_BD BEFORE DELETE ON COMPRA FOR EACH ROW
BEGIN
	DECLARE vESTOQUE INT;
    SELECT ESTOQUE INTO vESTOQUE FROM PRODUTO WHERE IDPRODUTO = OLD.IDPRODUTO;
	IF OLD.QTDE > vESTOQUE THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'IMPOSSÍVEL REMOVER. ESTOQUE INSUFICIENTE.';
END $$

