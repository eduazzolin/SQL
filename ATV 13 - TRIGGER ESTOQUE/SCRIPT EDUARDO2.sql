SET SQL_SAFE_UPDATES = 0;
DROP DATABASE IF EXISTS DBPEDIDO;
CREATE DATABASE DBPEDIDO;

USE DBPEDIDO;

CREATE TABLE PRODUTO (
	IDPRODUTO INT NOT NULL AUTO_INCREMENT
    , NOME VARCHAR(45)
    , ESTOQUE INT
	, PRIMARY KEY(IDPRODUTO)
);

CREATE TABLE COMPRA (
	IDCOMPRA INT NOT NULL AUTO_INCREMENT
    , IDPRODUTO INT NOT NULL
	, QTDE INT
    , VALORUNITARIO NUMERIC(8,2)
    , PRIMARY KEY (IDCOMPRA)
    , FOREIGN KEY (IDPRODUTO) REFERENCES PRODUTO(IDPRODUTO)
);

CREATE TABLE VENDA (
	IDVENDA INT NOT NULL AUTO_INCREMENT
    , IDPRODUTO INT NOT NULL
	, QTDE INT
    , VALORUNITARIO NUMERIC(8,2)
    , PRIMARY KEY (IDVENDA)
    , FOREIGN KEY (IDPRODUTO) REFERENCES PRODUTO(IDPRODUTO)
);

DELIMITER $$

-- 1. INSERÇÃO POR COMPRA
CREATE TRIGGER TR_COMPRA_AI AFTER INSERT ON COMPRA FOR EACH ROW
BEGIN
	UPDATE PRODUTO 
		SET ESTOQUE = ESTOQUE + NEW.QTDE
		WHERE IDPRODUTO = NEW.IDPRODUTO;
END $$

-- 2. REMOÇÃO POR VENDA
CREATE TRIGGER TR_VENDA_AI AFTER INSERT ON VENDA FOR EACH ROW
BEGIN 
	UPDATE PRODUTO
		SET ESTOQUE = ESTOQUE - NEW.QTDE
        WHERE IDPRODUTO = NEW.IDPRODUTO;
END $$

-- 3. VERIFICAÇÃO DE REMOÇÃO DE COMPRA
CREATE TRIGGER TR_COMPRA_BD BEFORE DELETE ON COMPRA FOR EACH ROW
BEGIN
	DECLARE vESTOQUE INT;
    SELECT ESTOQUE INTO vESTOQUE FROM PRODUTO WHERE IDPRODUTO = OLD.IDPRODUTO;
	IF OLD.QTDE > vESTOQUE THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'IMPOSSÍVEL REMOVER. ESTOQUE INSUFICIENTE.';
	END IF;
END $$

-- 3.1 REMOÇÃO DO ESTOQUE POR REMOÇÃO DE COMPRA
CREATE TRIGGER TR_COMPRA_AD AFTER DELETE ON COMPRA FOR EACH ROW
BEGIN
	UPDATE PRODUTO 
		SET ESTOQUE = ESTOQUE - OLD.QTDE 
        WHERE IDPRODUTO = OLD.IDPRODUTO;
END $$

-- 4. DEVOLUÇÃO AO ESTOQUE CASO A VENDA SEJA EXCLUÍDA
CREATE TRIGGER TR_VENDA_AD AFTER DELETE ON VENDA FOR EACH ROW
BEGIN
	UPDATE PRODUTO
		SET ESTOQUE = ESTOQUE + OLD.QTDE 
		WHERE IDPRODUTO = OLD.IDPRODUTO;
END $$

-- 5. VERIFICAÇÃO ANTES DE VENDA
CREATE TRIGGER TR_VENDA_BI BEFORE INSERT ON VENDA FOR EACH ROW
BEGIN
	IF NEW.QTDE > (SELECT ESTOQUE FROM PRODUTO WHERE IDPRODUTO = NEW.IDPRODUTO) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ESTOQUE INSUFICIENTE.';
    END IF;
END $$

-- 6. VERIFICAÇÃO DE UPDATE DE COMPRA
CREATE TRIGGER TR_COMPRA_BU BEFORE UPDATE ON COMPRA FOR EACH ROW
BEGIN
	DECLARE vESTOQUE_NEW INT;
	DECLARE vESTOQUE_OLD INT;
    SELECT ESTOQUE INTO vESTOQUE_NEW FROM PRODUTO WHERE IDPRODUTO = NEW.IDPRODUTO;
    SELECT ESTOQUE INTO vESTOQUE_OLD FROM PRODUTO WHERE IDPRODUTO = OLD.IDPRODUTO;
    
    -- CASO A ALTERAÇÃO SEJA NO MESMO PRODUTO
	IF OLD.IDPRODUTO = NEW.IDPRODUTO THEN 
		IF NEW.QTDE <= vESTOQUE_NEW THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'IMPOSSÍVEL ALTERAR, ESTOQUE INSUFICIENTE.';
		ELSE 
			UPDATE PRODUTO SET ESTOQUE = ESTOQUE - OLD.QTDE + NEW.QTDE
            WHERE IDPRODUTO = NEW.IDPRODUTO;
		END IF;
        
	-- CASO A ALTERAÇÃO MUDE O PRODUTO
	ELSE 
		IF vESTOQUE_OLD < OLD.QTDE THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'IMPOSSÍVEL ALTERAR, ESTOQUE INSUFICIENTE.';
		ELSE 
			UPDATE PRODUTO SET ESTOQUE = ESTOQUE - OLD.QTDE WHERE IDPRODUTO = OLD.IDPRODUTO;
            UPDATE PRODUTO SET ESTOQUE = ESTOQUE + NEW.QTDE WHERE IDPRODUTO = NEW.IDPRODUTO;
		END IF;
	END IF;
END $$

-- 7. ATUALIZAÇÃO DE VENDA
CREATE TRIGGER TR_VENDA_BU BEFORE UPDATE ON VENDA FOR EACH ROW
BEGIN
	DECLARE vESTOQUE INT;
	SELECT ESTOQUE INTO vESTOQUE FROM PRODUTO WHERE IDPRODUTO = NEW.IDPRODUTO;

	IF OLD.IDPRODUTO = NEW.IDPRODUTO THEN
		IF vESTOQUE > (NEW.QTDE - OLD.QTDE) THEN
			UPDATE PRODUTO SET ESTOQUE = ESTOQUE - OLD.QTDE + NEW.QTDE;
		ELSE 
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ESTOQUE INSUFICIENTE.';
		END IF;
        
	ELSE
		IF vESTOQUE >= NEW.QTDE THEN
			UPDATE PRODUTO SET ESTOQUE = ESTOQUE - NEW.QTDE WHERE IDPRODUTO = NEW.IDPRODUTO;
            UPDATE PRODUTO SET ESTOQUE = ESTOQUE + OLD.QTDE WHERE IDPRODUTO = OLD.IDPRODUTO;
		ELSE 
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ESTOQUE INSUFICIENTE.';
		END IF;
	END IF;
		
END $$

DELIMITER ;

-- INSERINDO VALORES INICIAIS
INSERT INTO PRODUTO (NOME, ESTOQUE) VALUES ('PAZ', 0);
INSERT INTO PRODUTO (NOME, ESTOQUE) VALUES ('SOSSEGO', 0);
INSERT INTO PRODUTO (NOME, ESTOQUE) VALUES ('PROBLEMAS', 999);
INSERT INTO COMPRA (QTDE, VALORUNITARIO, IDPRODUTO) VALUES (1, 30000, 1);
INSERT INTO COMPRA (QTDE, VALORUNITARIO, IDPRODUTO) VALUES (1, 30000, 2);
INSERT INTO COMPRA (QTDE, VALORUNITARIO, IDPRODUTO) VALUES (111, 0.5, 3);

-- INSERINDO VENDA OK
INSERT INTO VENDA (QTDE, VALORUNITARIO, IDPRODUTO) VALUES (1, 3, 1);

-- REMOVENDO COMPRA OK
-- DELETE FROM COMPRA WHERE IDCOMPRA = 1;

-- DEVOLUÇÃO OK
-- DELETE FROM VENDA WHERE IDVENDA = 1;

UPDATE VENDA SET IDPRODUTO = 2 WHERE IDVENDA = 1;

UPDATE COMPRA SET IDPRODUTO = 1 WHERE IDCOMPRA = 3;
INSERT INTO VENDA (QTDE, VALORUNITARIO, IDPRODUTO) VALUES (112, 0.1, 1);
INSERT INTO COMPRA (QTDE, VALORUNITARIO, IDPRODUTO) VALUES (11838382, 0.1, 3);

SELECT * FROM PRODUTO;